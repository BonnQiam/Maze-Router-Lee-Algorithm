##################################
# GUI                            #
##################################

# Command to open the GUI. The GUI is an HTML application, you use this command to open web browser to view the GUI
# Command has three components, path_to_browser, option_to_browser (optional), and a "%s" which will be replaced
# by the program to the path_to_GUI_file
# You should check the browser's manual for option_to_browser
# Examples are below:

# Using firefox to view the GUI, in a new window
gui_path_command = *"C:\Program Files\Mozilla Firefox\firefox.exe" -new-window %s*

# Using firefox to view the GUI, default option (open in new tab)
#gui_path_command = *"C:\Program Files\Mozilla Firefox\firefox.exe" %s*

# Using firefox to view the GUI, in a new window. In this case, firefox is in your system path
#gui_path_command = *firefox -new-window %s*

# [DEBUG] You have manually open the browser. You do not want to the program to open the browser
# This is useful in dubugging mode, because the program always call your browser to open a new window/tab, which is annoying
#gui_path_command = *manual*

# For Chorme: Chrome seems not support relative path, therefore, one solution is:
#gui_path_command = *"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" "C:\path_to_exe_file\%s"*
# But the system() function cannot accept a string which contains 4 double-quotations (like above) (on Win10).
# Therefore, use Firefox!


##################################
# Animation                      #
##################################

# Delay when export data to GUI
# The program is very fast, user cannot see the progres without delay
# The program will pause this much miniseconds everytime the data exported to GUI
gui_delay = 600

# Export intermediate result (wave)? 1 for export, 0 or others for not export
gui_interresult = 1


##################################
# CMD table                      #
##################################

# Print intermediate result (a table) in cmd? 1 for print, 0 or others for not print
# It is vary ugly!
print_interresult = 0


##################################
# Functionality                  #
##################################

# This is an np-problem. Lee algorithm guarantees the best solution for single net, but it is unknown waht is the best solution
# for multiple nets, or whether all nets can be placed.
# The program will give up after (this times net count) runs if not all nets are placed. 
max_retry_index = 2

# Possibility for shuffle the netlist. This is used to generate randomlized netlist order for placing.
# If one net cannot be placed, should the program start from this net in next run?
# Posibility = this / 255
priority_random_index = 80

# In some operation (e.g. back-tracing), the program tends to use the same neighbor (e.g. the left one).
# In some case, another neighbor may be a better option.
# Therefore, we shuffle the priority to allow different neighbor to be used.
# Posibility = this / 255
neighbor_random_index = 125